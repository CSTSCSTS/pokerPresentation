@startuml

actor ユーザー

boundary handleSubmit
participant LoginController
participant LoginService
participant LoginSession
participant UserRepository
participant User
participant MoneyService
participant MoneyRepository
participant Money
database possession_money
database poker_User_Info

ユーザー -> handleSubmit : ログインボタンをクリック
handleSubmit -> ユーザー : ベット画面にエラー表示
note left : 必須チェックにひっかかった場合
handleSubmit -> LoginController : 
note right: 以下の情報を受け取る\n・ユーザー名\n・パスワード
LoginController -> LoginService : UserDto login(String username, String password)
LoginService -> UserRepository : OptionalEntity<PokerUserInfo> getPokerUserByUsernameAndPassword(username, password)
UserRepository -> poker_User_Info : SELECT
note left : ユーザー名・パスワードでユーザーが取得できることを確認
LoginService -> LoginController : 取得できない場合、throw LoginFailureException()する
LoginController -> ユーザー : ログイン画面にエラーを表示
note right : DBに保存されているログイン日時と現在の日時を比較して、\n本日ログインしているかどうか確認する
alt ログイン済み
  LoginService -> UserRepository : update(user)
  note left : ログイン日時を更新して保存
  UserRepository -> poker_User_Info : UPDATE
  LoginService -> LoginController : return user
  LoginController -> ユーザー : ポーカースタート画面を表示
else ログイン初めて
  LoginService -> MoneyRepository : getMoney(int userId)
  MoneyRepository -> possession_money : SELECT
  LoginService -> Money : void plusMoney(BigDecimal betMoney)
  note right : 100円所持金を増やす
  LoginService -> MoneyRepository : save(Money money)
  MoneyRepository -> possession_money : UPDATE
  LoginService -> UserRepository : update(user)
  note left : ログイン日時を更新して保存
  UserRepository -> poker_User_Info : UPDATE
  LoginService -> LoginController : return user
  LoginController -> LoginSession: ログインセッションを作成
  LoginController -> ユーザー : ログインサービスにより、\n所持金が増えたことを示すポップアップを表示
end

@enduml