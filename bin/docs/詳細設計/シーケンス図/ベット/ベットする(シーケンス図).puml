@startuml

actor ユーザー

boundary handleSubmit
boundary handleToChange
boundary handlePlaySubmit
boundary handleSurrenderSubmit
participant PokerController
participant PokerService
participant MoneyService
participant MoneyRepository
participant Money
database possession_money

ユーザー -> handleSubmit : ベットボタンをクリック
handleSubmit -> ユーザー : ベット画面にエラー表示
note left : 必須チェック・0円チェックを\n実施して、いずれかにひっかかった場合
handleSubmit -> PokerController : ポーカー開始のためのPOSTリクエスト
note right: Controllerは以下の情報を受け取る\n・ベット額\n・ジョーカーを含むかどうかフラグ
PokerController -> PokerController : sessionCheck()
alt セッションタイムアウト時
  PokerController -> PokerController : throw LoginSessionTimeOutException()をする
  PokerController -> ユーザー : セッションタイムアウト画面を表示する
end
PokerController -> PokerService : PokerPlayingInfo pokerPrepare(int userId, BigDecimal betMoney, boolean jokerIncluded)
note left: ポーカーの準備\nメソッド呼ぶ
PokerService -> MoneyRepository : Money getMoney(int userId);
MoneyRepository -> possession_money : SELECT
PokerService -> PokerController : ベット額 > 所持金の場合、throw IllegalBetException()する
PokerController -> ユーザー : ベット画面にエラーを表示
PokerService -> PokerController : return PokerPlayingInfo.builder().build()
note right: 戻り値のPokerPlayingInfoの中には、以下の情報が入っている。\n・山札\n・プレイヤーの手札\n・CPUの手札
PokerController -> ユーザー : ポーカープレイ画面にプレイヤー・CPUの手札を表示

==↑ベット～ポーカーの初期手札表示まで==

ユーザー -> handleToChange : 手札交換ボタンをクリック
handleToChange -> PokerController : ポーカーの手札交換のためのPOSTリクエスト
note right: Controllerは以下の情報を受け取る\n・山札\n・プレイヤーの手札\n・CPUの手札
PokerController -> PokerController : sessionCheck()
alt セッションタイムアウト時
  PokerController -> PokerController : throw LoginSessionTimeOutException()をする
  PokerController -> ユーザー : セッションタイムアウト画面を表示する
end
PokerController -> PokerService : PokerPlayingInfo handChangeAfterProcess(PokerPlayingInfo.builder().build())
note left: handChangeAfterProcessメソッドには以下の情報を渡している\n・山札\n・プレイヤーの手札\n・CPUの手札
note right: プレイヤー・CPU双方の手札交換、役判定、勝者判定を実施するメソッドを呼ぶ
PokerService -> PokerController : return PokerPlayingInfo.builder().build()
note right: 戻り値のPokerPlayingInfoの中には、以下の情報が入っている。\n・山札\n・プレイヤーの手札\n・CPUの手札\n・山札\n・プレイヤーの役\n・CPUの役\n・勝者\n・手札交換済みフラグ
PokerController -> ユーザー : ポーカープレイ画面に勝負するかしないかの選択ボタンを表示

==↑ポーカーの手札交換～勝負するかしないかのボタン表示まで==

alt 勝負する
  ユーザー -> handlePlaySubmit : 勝負するボタンをクリック
  handlePlaySubmit -> PokerController : 所持金更新のためのPOSTリクエスト
  note right: Controllerは以下の情報を受け取る\n・ベット指定額\n・勝者はだれか(PLAYER or CPU or NOTHING)
  PokerController -> PokerController : sessionCheck()
alt セッションタイムアウト時
  PokerController -> PokerController : throw LoginSessionTimeOutException()をする
  PokerController -> ユーザー : セッションタイムアウト画面を表示する
end
  PokerController -> MoneyService : Money update(int userId, BigDecimal betMoney, Winner winner);
  MoneyService -> MoneyRepository : Money getMoney(int userId)
  note right : 所持金情報を取得
  MoneyRepository -> possession_money : SELECT
  MoneyRepository --> MoneyService : return money
  alt プレイヤーが勝者
    MoneyService -> Money : void plusMoney(BigDecimal betMoney)
    note right : ベット額だけ所持金を増やす
    MoneyService -> MoneyRepository : save(Money money)
    MoneyRepository -> possession_money : UPDATE
    MoneyService --> MoneyController : return money
  else CPUが勝者
    MoneyService -> Money : void minusMoney(BigDecimal betMoney)
    note right : ベット額だけ所持金を減らす
    MoneyService -> MoneyRepository : save(Money money)
    MoneyRepository -> possession_money : UPDATE
    MoneyService --> MoneyController : return money
  else 引き分け
    MoneyService -> MoneyRepository : save(Money money)
    note right : 更新日時をUPDATEする
    MoneyRepository -> possession_money : UPDATE
  end
  handlePlaySubmit -> ユーザー : 勝負結果を表すメッセージ・もう一度ボタン・スタートに戻るボタンを表示する。
else 勝負しない
  ユーザー -> handleSurrenderSubmit : 勝負しないボタンをクリック
  handleSurrenderSubmit -> ユーザー : 勝負しなかったことを表すメッセージ・もう一度ボタン・スタートに戻るボタンを表示する。
end

==勝負するしないか選択～もう一度ボタン・スタートボタン表示まで==


@enduml