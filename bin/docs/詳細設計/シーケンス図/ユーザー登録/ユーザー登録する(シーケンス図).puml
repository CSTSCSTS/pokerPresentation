@startuml

actor ユーザー

boundary handleSubmit
participant UserController
participant UserService
participant MoneyService
participant User
participant Money
participant UserRepository
participant MoneyRepository
database poker_User_Info
database possession_money

ユーザー -> handleSubmit : 登録ボタンをクリック
handleSubmit -> ユーザー : ユーザー登録画面にエラー表示
note left : 下記のいずれかのチェックに引っかかった場合\n・必須チェック\n・文字数チェック\n・パスワードとパスワード(確認)同一チェック
handleSubmit -> UserController : ユーザー登録のためのPOSTリクエスト
note right: 以下の情報を受け取る\n・ユーザー名\n・パスワード
UserController -> UserService : User register(String userName, String password)
note left: 1.サービスのユーザー登録\nメソッド呼ぶ
UserService -> UserRepository : boolean userNameIsDuplicate(username)
note left: 2.ユーザー名重複チェック
UserRepository -> poker_User_Info : SELECT
UserRepository --> UserService : return true or false
alt userNameIsDuplicate return true
  UserService -> User : User user = new User(userName, password)
  note left: 3.ユーザーを新規作成
  UserService -> UserRepository : void insert(user)
  note left: 4.作成したユーザーを保存
  UserRepository -> poker_User_Info : INSERT
  UserService -> MoneyService : Money register(int userId)
  note left: 5.所持金情報を新規作成\n→最初の所持金として1000円を登録する
  MoneyService -> Money : Money money = new Money(\nuserId, \nPokerConstants.USER_REGISTER_BOUNS, \nLocalDateTime.now())
  MoneyService -> MoneyRepository : save(money)
  note left: 6.作成した所持金情報を保存
  MoneyRepository -> possession_money : INSERT
  UserService --> UserController : return user
  UserController -> ユーザー : ログイン画面表示
else userNameIsDuplicate return false
  UserService -> UserController : throw UserNameDuplicateException()
  UserController -> ユーザー : ユーザー登録画面にエラー表示
end

@enduml